<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
	     http://www.springframework.org/schema/context  
	   	 http://www.springframework.org/schema/context/spring-context-3.0.xsd  
	   	 http://www.springframework.org/schema/tx
	   	 http://www.springframework.org/schema/tx/spring-tx.xsd 
	   	 http://www.springframework.org/schema/util
		 http://www.springframework.org/schema/util/spring-util-2.0.xsd
	     http://www.springframework.org/schema/mvc  
	     http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	     http://www.springframework.org/schema/aop 
     	 http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	
	<!-- 
		<import resource="classpath:dubbo-consumer.xml"/>
	-->
	<context:annotation-config/>
    <aop:config/>
    <aop:aspectj-autoproxy/>
	
	<import resource="classpath:applicationContext-mongodb.xml"/>
	<context:property-placeholder location="classpath:config.properties" ignore-unresolvable="true"/>
	<context:component-scan base-package="com.mytijian.mediator.company.migrate" />
	<tx:annotation-driven transaction-manager="transactionManager" order="3"/>
	<bean id="dynamicDataSource"
		class="com.mytijian.sharding.datasource.DynamicRoutingDataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="defaultDataSource" key="defaultDataSource"></entry>
				<entry value-ref="examReportShardingDataSource" key="examReportShardingDataSource"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="defaultDataSource">
		</property>
	</bean>

	<bean id="defaultDataSource" name="defaultDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="40" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
	</bean>
	
	<bean id="examReportShardingDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${examreport_jdbc_url}" />
		<property name="username" value="${examreport_jdbc_username}" />
		<property name="password" value="${examreport_jdbc_password}" />
		<property name="filters" value="stat" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
	</bean>

	<bean id="pagePlugin"
		class="com.mytijian.pulgin.mybatis.pagination.PaginationInterceptor">
		<property name="properties">
			<props>
				<prop key="dialect">com.mytijian.pulgin.jdbc.dialet.MySQLDialect</prop>
				<prop key="sqlIdPattern">.*ByPage.*</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionChecker" class="com.mytijian.pulgin.mybatis.plugin.TransactionChecker" />
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dynamicDataSource" />
		<property name="plugins">
			<array>
				<ref bean="pagePlugin" />
				<ref bean="transactionChecker" />
			</array>
		</property>
		<property name="mapperLocations">
			<list>
				<value>classpath:com/mytijian/mediator/company/migrate/dao/*.xml</value>
				<value>classpath:com/mytijian/mediator/company/migrate/correct/dao/*.xml</value>
			</list>
		</property>
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage"
			value="com.mytijian.mediator.company.migrate.dao,
				   com.mytijian.mediator.company.migrate.correct.dao" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dynamicDataSource" />
	</bean>
	
	<bean id="schedulerFactoryBean" name="schedulerFactoryBean"
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean"
		destroy-method="destroy">
		<property name="jobFactory">
			<bean class="com.mytijian.mediator.company.migrate.util.MyJobFactory" />
		</property>
		<property name="waitForJobsToCompleteOnShutdown" value="true"/>
		<!-- 不自动开启scheduler -->
		<property name="autoStartup" value="false"/>
	</bean>
	
</beans>